import { Parcel, ParcelType } from './app/types/parcel';
import { Status } from './app/types/status';
import { groupBy } from './app/utils/group';
import { sortBy } from './app/utils/sort';

const _parcels: Parcel[] = [
  {
    type: ParcelType.App,
    name: 'Utils',
    imageUrl: 'https://raw.githubusercontent.com/ribbon-studios/logos/main/utils/social-media.png',
    description: 'Local only implementation of your favorite tools.',
    url: 'https://utils.ribbonstudios.com',
    repo: 'github:ribbon-studios/utils',
    status: Status.IN_DEVELOPMENT,
  },
  {
    type: ParcelType.App,
    name: 'Zelda Map Tracker',
    imageUrl: 'https://raw.githubusercontent.com/ribbon-studios/logos/main/zelda-map/social-media.png',
    description: 'A tool for Zelda 1 to track all your discoveries!',
    url: 'https://zelda.ribbonstudios.com',
    repo: 'github:ribbon-studios/zelda-map',
    status: Status.IN_DEVELOPMENT,
  },
  {
    type: ParcelType.Framework,
    name: 'Flarie',
    imageUrl: 'https://repository-images.githubusercontent.com/659549026/891e12dd-c7f7-41d4-a689-c68ba76d1dee',
    description: 'A universal bot framework!~ üî•',
    repo: 'github:ribbon-studios/flarie',
    parcel: 'npm:@flarie/core',
    status: Status.IN_DEVELOPMENT,
  },
  {
    type: ParcelType.Framework,
    name: 'Salte Auth',
    imageUrl: 'https://repository-images.githubusercontent.com/70510237/9a5dca07-cab5-4b50-87b4-ad83f67776db',
    description: 'Authentication for the modern web!',
    repo: 'github:salte-auth/salte-auth',
    parcel: 'npm:@salte-auth/salte-auth',
    status: Status.SUNSET,
  },
  {
    type: ParcelType.Library,
    name: '@refreshly/core',
    description: 'Simply a key rotation tool!~',
    repo: 'github:ribbon-studios/refreshly',
    parcel: 'npm:@refreshly/core',
    status: Status.COMPLETED,
  },
  {
    type: ParcelType.Library,
    name: '@rain-cafe/fork-me',
    description: 'A "Fork Me" react component built out of spite',
    repo: 'github:ribbon-studios/fork-me',
    parcel: 'npm:@rain-cafe/fork-me',
    status: Status.COMPLETED,
  },
  {
    type: ParcelType.Library,
    name: '@rain-cafe/ribbon',
    description: 'A simple react ribbon~',
    repo: 'github:ribbon-studios/ribbon',
    parcel: 'npm:@rain-cafe/ribbon',
    status: Status.COMPLETED,
  },
  {
    type: ParcelType.Library,
    name: '@rain-cafe/react-utils',
    description: 'Collection of react utilities curated by the Rainbow Cafe~ ‚ù§Ô∏è',
    repo: 'github:ribbon-studios/react-utils',
    parcel: 'npm:@rain-cafe/react-utils',
    status: Status.COMPLETED,
  },
  {
    type: ParcelType.Library,
    name: '@rain-cafe/logger',
    description: 'A simple logger for all Rainbow Cafe Apps & Libraries',
    repo: 'github:ribbon-studios/logger',
    parcel: 'npm:@rain-cafe/logger',
    status: Status.COMPLETED,
  },
  {
    type: ParcelType.Library,
    name: 'ng-currency',
    description: 'Currency with AngularJS made easy!',
    repo: 'github:salte-io/ng-currency',
    parcel: 'npm:ng-currency',
    status: Status.SUNSET,
  },
  {
    type: ParcelType.Library,
    name: 'quillie-components',
    description: 'Components for Quillie!',
    repo: 'github:salte-io/quillie-components',
    parcel: 'npm:@salte-io/quillie-components',
    status: Status.SUNSET,
  },
  {
    type: ParcelType.Library,
    name: 'salte-filter',
    description: 'Registers filter components allowing for a single input and output!',
    repo: 'github:salte-io/salte-filter',
    parcel: 'npm:salte-filter',
    status: Status.SUNSET,
  },
  {
    type: ParcelType.Library,
    name: 'salte-angular-hateoas',
    description: 'The simple way to consume HATEOAS enabled REST APIs with AngularJS',
    repo: 'github:salte-io/salte-angular-hateoas',
    parcel: 'npm:salte-angular-hateoas',
    status: Status.SUNSET,
  },
  {
    type: ParcelType.Library,
    name: 'dry-parser',
    description: 'A simple tool for parsing JavaScript objects to avoid repetition',
    repo: 'github:salte-io/dry-parser',
    parcel: 'npm:dry-parser',
    status: Status.SUNSET,
  },
];

export const parcels = sortBy(_parcels, 'status');
export const parcelsByType = groupBy(parcels, 'type');
